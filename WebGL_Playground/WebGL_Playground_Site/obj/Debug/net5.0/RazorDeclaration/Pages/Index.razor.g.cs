// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebGL_Playground_Site.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using WebGL_Playground_Site;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using WebGL_Playground_Site.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Blazor.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\_Imports.razor"
using Blazor.Extensions.Canvas;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\Pages\Index.razor"
using Blazor.Extensions.Canvas.WebGL;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\Pages\Index.razor"
using WebGLWrapping;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 14 "D:\Documents\PROJECTS\Blazor\WebGL_Playground\WebGL_Playground\WebGL_Playground_Site\Pages\Index.razor"
       
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLProgram glProgram;

    private NumberInput trianglesCount;

    private bool needsRendering = true;

    private async Task<String> GetFileContents(string sourcePath) {
        string source;
        try {
            source = await Http.GetStringAsync(sourcePath);
            return source;
        } catch(Exception e) {
            throw new Exception(e.Message);
        }
    }

    private async Task DrawTriangles(float[] vertices, byte[] colors) {
        var positionBuffer = await gl.CreateBufferAsync();
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, positionBuffer);
        await gl.BufferDataAsync(BufferType.ARRAY_BUFFER, vertices, BufferUsageHint.STATIC_DRAW);

        var positionLoc = (uint)await gl.GetAttribLocationAsync(glProgram.Program, "position");
        await gl.EnableVertexAttribArrayAsync(positionLoc);
        await gl.VertexAttribPointerAsync(positionLoc, 2, DataType.FLOAT, false, 0, 0);

        var colorBuffer = await gl.CreateBufferAsync();
        await gl.BindBufferAsync(BufferType.ARRAY_BUFFER, colorBuffer);
        await gl.BufferDataAsync(BufferType.ARRAY_BUFFER, colors, BufferUsageHint.STATIC_DRAW);

        var colorLoc = (uint)await gl.GetAttribLocationAsync(glProgram.Program, "color");
        await gl.EnableVertexAttribArrayAsync(colorLoc);
        await gl.VertexAttribPointerAsync(colorLoc, 4, DataType.UNSIGNED_BYTE, true, 0, 0);

        await gl.DrawArraysAsync(Primitive.TRIANGLES, 0, vertices.Length);
    }

    private Tuple<float[], byte[]> GenerateTriangles(int count) {
        var vertices = new float[6 * count];
        var colors = new byte[12 * count];

        var rnd = new Random();

        for(int i = 0; i < vertices.Length; i++) {
            vertices[i] = (float)(rnd.NextDouble() * 2.0 - 1.0);
        }
        for(int i = 0; i < colors.Length; i++) {
            colors[i] = (byte)rnd.Next(0, 255);
        }

        return new Tuple<float[], byte[]>(vertices, colors);
    }

    protected async Task Draw() {
        await gl.ViewportAsync(0, 0, (int)canvasReference.Width, (int)canvasReference.Height);
        await gl.ClearColorAsync(0.0f, 0.0f, 0.0f, 1.0f);

        await gl.ClearAsync(BufferBits.COLOR_BUFFER_BIT);

        var count = (int)trianglesCount.Value;

        var data = GenerateTriangles(count);

        await DrawTriangles(data.Item1, data.Item2);
        Console.WriteLine("Done drawing");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(needsRendering) {
            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes { PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE });

            var vertShaderSource = await GetFileContents("Shaders/shader.vert");
            var fragShaderSource = await GetFileContents("Shaders/shader.frag");

            glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            await gl.UseProgramAsync(glProgram);

            await Draw();

            needsRendering = false;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
