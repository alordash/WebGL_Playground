@page "/voronoiTesselation"

@using Blazor.Extensions.Canvas.WebGL;
@using WebGLWrapping;
@using System.Collections
@using WebGL_Playground_Site;
@using WebGL_Playground_Site.Geometry
@inject HttpClient Http;
@inject IJSRuntime JS

<h3>Voronoi Tesselation</h3>

<BECanvas Width="800" Height="800" @ref="canvasReference"></BECanvas>
<br/>
<NumberInput @ref="pointsCountInput" IntegerNumber="true" DefaultValue="@DefaultPointsCount" PlaceHolder="Number of points"/>
<input type="checkbox" @bind="DrawPoints">Draw points
<br/>
<button @onclick="Draw">Draw</button>

@code {
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLDrawer glDrawer;

    private NumberInput pointsCountInput;
        private const int DefaultPointsCount = 20;
    private IEnumerable<Point> Points = Point.GeneratePoints(DefaultPointsCount);

    private bool DrawPoints;

    private void RandomizeData() {
        Points = Point.GeneratePoints((int)pointsCountInput.Value);
    }

    private async Task Draw() {
        await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);

        Points = Point.GeneratePoints((int)pointsCountInput.Value);
        var vertices = Points.SelectMany(x => new[] {
            x.x, x.y
        }).ToArray();
        var colors = GLHelper.NormalizeColors(GLHelper.GenerateColorSets(vertices.Length / 2, ColorsGeneratorFlags.FixAlpha)).ToArray();

        await glDrawer.FillUniformI("u_highlight", DrawPoints ? 1 : 0);
        await glDrawer.DrawVoronoiTesselation(vertices, colors);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes {
                PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE
            });

            var vertShaderSource = await Misc.GetFileContents("Shaders/voronoi.vert", Http);
            var fragShaderSource = await Misc.GetFileContents("Shaders/voronoi.frag", Http);

            var glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            glDrawer = new GLDrawer(glProgram);
            await gl.UseProgramAsync(glProgram);
            await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);
        }
    }

}