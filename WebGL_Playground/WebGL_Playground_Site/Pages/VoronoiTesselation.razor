@page "/voronoiTesselation"

@using Blazor.Extensions.Canvas.WebGL;
@using WebGLWrapping;
@using System.Collections
@using WebGL_Playground_Site;
@using WebGL_Playground_Site.Geometry
@inject HttpClient Http;
@inject IJSRuntime JS

<h3>Voronoi Tesselation</h3>

<BECanvas Width="800" Height="800" @ref="canvasReference"></BECanvas>
<br/>
<NumberInput @ref="PointsCountInput" IntegerNumber="true" DefaultValue="@DefaultPointsCount" PlaceHolder="Number of points"/>
<input type="checkbox" @bind="DrawPoints">Draw points
<br/>
<button @onclick="DrawButtonClick">Draw</button>
<br/>
<NumberInput @ref="TimeStepInput" DefaultValue="0.01"/>
<button @onclick="Interpolate">Interpolate</button>

@code {
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLDrawer glDrawer;

    public NumberInput PointsCountInput;
        public const int DefaultPointsCount = 20;

    private MeshData beginMesh = new MeshData();
    private MeshData endMesh = new MeshData();

    private bool drawPoints = false;
    private bool DrawPoints {
        get => drawPoints;
        set {
            drawPoints = value;
            Draw();
        }
    }

    private void RandomizeMeshes() {
        beginMesh.RandomizeData((int)PointsCountInput.Value);
        endMesh.RandomizeData((int)PointsCountInput.Value);
    }

    private async Task Draw() {
        await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);
        await glDrawer.FillUniformI("u_highlight", DrawPoints ? 1 : 0);
        await glDrawer.DrawVoronoiTesselation(beginMesh, endMesh, time);
    }

    private async Task DrawButtonClick() {
        RandomizeMeshes();
        await Draw();
    }

    public NumberInput TimeStepInput;
    public float time = 0f;
    private Task InterpolateTask;
    private bool ContinueInterpolation = true;
    private float timeStep = 0.005f;

    protected async Task Interpolate() {
        timeStep = (float)TimeStepInput.Value;
        if (InterpolateTask is not null) {
            ContinueInterpolation = !ContinueInterpolation;
            return;
        }
        InterpolateTask = Task.Run(async () => {
            var interval = (int)(1000 * timeStep);
            while (true) {
                await Task.Delay(interval);
                if (!ContinueInterpolation) {
                    continue;
                }
                await glDrawer.ClearWithColor(0f, 0f, 0f, 1f);
                var newTime = time + timeStep;
                switch (newTime) {
                    case > 1f:
                        timeStep = -timeStep;
                        newTime = time + timeStep;
                        break;
                    case < 0f:
                        timeStep = -timeStep;
                        newTime = time + timeStep;
                        break;
                }
                time = (float)newTime;
                Console.WriteLine($"Interpolating, time {time}");

                await glDrawer.FillUniformI("u_highlight", DrawPoints ? 1 : 0);
                await glDrawer.SetTime(time);
                await glDrawer.DrawBlankRectangle(false);
    //                await glDrawer.DrawVoronoiTesselation(beginMesh, beginMesh, time);
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            RandomizeMeshes();

            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes {
                PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE
            });

            var vertShaderSource = await Misc.GetFileContents("Shaders/voronoi.vert", Http);
            var fragShaderSource = await Misc.GetFileContents("Shaders/voronoi.frag", Http);

            var glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            glDrawer = new GLDrawer(glProgram);
            await gl.UseProgramAsync(glProgram);
            await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);
        }
    }

}