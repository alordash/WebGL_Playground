@page "/voronoiTesselation"

@using Blazor.Extensions.Canvas.WebGL;
@using WebGLWrapping;
@using System.Collections
@using WebGL_Playground_Site;
@using WebGL_Playground_Site.Geometry
@inject HttpClient Http;

<h3>Voronoi Tesselation</h3>

<BECanvas Width="1000" Height="600" @ref="canvasReference"></BECanvas>
<br/>
<button @onclick="Draw">Draw</button>

@code {
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLDrawer glDrawer;

    private IEnumerable<Point> Points;

    private async Task Draw() {
        await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);
        
        var verticesValues = GLHelper.FillTrianglesVertices;
        var colors = GLHelper.GenerateColorSets(6, ColorsGeneratorFlags.FixAlpha);
        await glDrawer.DrawTriangles(verticesValues, colors.ToArray());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes { PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE });

            var vertShaderSource = await Misc.GetFileContents("Shaders/shader.vert", Http);
            var fragShaderSource = await Misc.GetFileContents("Shaders/shader.frag", Http);

            var glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            glDrawer = new GLDrawer(glProgram);
            await gl.UseProgramAsync(glProgram);
            await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);
        }
    }

}