@page "/voronoiTesselation"

@using Blazor.Extensions.Canvas.WebGL;
@using WebGLWrapping;
@using System.Collections
@using WebGL_Playground_Site;
@using WebGL_Playground_Site.Geometry
@inject HttpClient Http;
@inject IJSRuntime JS

<h3>Voronoi Tesselation</h3>

<BECanvas Width="800" Height="800" @ref="canvasReference"></BECanvas>
<br/>
<NumberInput @ref="PointsCountInput" IntegerNumber="true" DefaultValue="@DefaultPointsCount" PlaceHolder="Number of points"/>
<input type="checkbox" @bind="DrawPoints">Draw points
<br/>
<button @onclick="DrawButtonClick">Draw</button>

@code {
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLDrawer glDrawer;

    public NumberInput PointsCountInput;
        public const int DefaultPointsCount = 20;

    private IEnumerable<float> vertices;
    private IEnumerable<float> colors;
    private float[] verticesValues;
    private float[] colorsValues;

    private bool drawPoints = false;
    private bool DrawPoints {
        get => drawPoints;
        set {
            drawPoints = value;
            Draw();
        }
    }

    private void RandomizeData() {
        var count = (int)PointsCountInput.Value;
        vertices = GLHelper.GenerateFloats(2 * count);
        colors = GLHelper.NormalizeColors(GLHelper.GenerateColorSets(count, ColorsGeneratorFlags.FixAlpha));
        verticesValues = vertices.ToArray();
        colorsValues = colors.ToArray();
    }

    private async Task Draw() {
        await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);

        await glDrawer.FillUniformI("u_highlight", DrawPoints ? 1 : 0);
        await glDrawer.DrawVoronoiTesselation(verticesValues, colorsValues);
    }

    private async Task DrawButtonClick() {
        RandomizeData();
        await Draw();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            RandomizeData();

            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes {
                PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE
            });

            var vertShaderSource = await Misc.GetFileContents("Shaders/voronoi.vert", Http);
            var fragShaderSource = await Misc.GetFileContents("Shaders/voronoi.frag", Http);

            var glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            glDrawer = new GLDrawer(glProgram);
            await gl.UseProgramAsync(glProgram);
            await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);
        }
    }

}