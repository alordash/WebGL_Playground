@page "/voronoiTesselation"

@using Blazor.Extensions.Canvas.WebGL;
@using WebGLWrapping;
@using System.Collections
@using WebGL_Playground_Site;
@using WebGL_Playground_Site.Geometry
@inject HttpClient Http;
@inject IJSRuntime JS

<h3>Voronoi Tesselation</h3>

<BECanvas Width="1000" Height="600" @ref="canvasReference"></BECanvas>
<br/>
<NumberInput @ref="pointsCountInput" IntegerNumber="true" DefaultValue="5" PlaceHolder="Number of points"/>
<br/>
<button @onclick="Draw">Draw</button>

@code {
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLDrawer glDrawer;

    private NumberInput pointsCountInput;
        private const int DefaultPointsCount = 5;
    private IEnumerable<Point> Points = Point.GeneratePoints(DefaultPointsCount);

    private float[] setRectangle(float x, float y, float width, float height) {
        var x1 = x - width;
        var x2 = x + width;
        var y1 = y - height;
        var y2 = y + height;
        return new[] {
            x1, y1,
            x2, y1,
            x1, y2,
            x1, y2,
            x2, y1,
            x2, y2,
        };
    }

    private async Task Draw() {

        await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);

        Points = Point.GeneratePoints((int)pointsCountInput.Value);
        var vertices = Points.SelectMany(x => new[] {
            x.x, x.y
        }).ToArray();
        var colors = GLHelper.NormalizeColors(GLHelper.GenerateColorSets(vertices.Length / 2, ColorsGeneratorFlags.FixAlpha)).ToArray();

        await glDrawer.FillBuffer("a_texCoord", 2, DataType.FLOAT, false, new float[] {
            0f, 0f,
            1f, 0f,
            0f, 1f,
            0f, 1f,
            1f, 0f,
            1f, 1f,
        });
        var texture = await gl.CreateTextureAsync();
        await gl.BindTextureAsync(TextureType.TEXTURE_2D, texture);

        await gl.TexParameterAsync(TextureType.TEXTURE_2D, TextureParameter.TEXTURE_WRAP_S, (uint)TextureParameterValue.CLAMP_TO_EDGE);
        await gl.TexParameterAsync(TextureType.TEXTURE_2D, TextureParameter.TEXTURE_WRAP_T, (uint)TextureParameterValue.CLAMP_TO_EDGE);
        await gl.TexParameterAsync(TextureType.TEXTURE_2D, TextureParameter.TEXTURE_MIN_FILTER, (uint)TextureParameterValue.NEAREST);
        await gl.TexParameterAsync(TextureType.TEXTURE_2D, TextureParameter.TEXTURE_MAG_FILTER, (uint)TextureParameterValue.NEAREST);

        var values = new byte[] {
            255, 0, 0, 255,
            0, 255, 0, 255,
            0, 0, 255, 255,
            255, 255, 0, 255,
        };

        await gl.TexImage2DAsync(JS, canvasReference, Texture2DType.TEXTURE_2D, 0, PixelFormat.RGBA, 2, 2, 0, PixelFormat.RGBA, PixelType.UNSIGNED_BYTE, values);
//        var pixels = await JS.InvokeAsync<string>("glTexImage2D", canvasReference, Texture2DType.TEXTURE_2D, 0, PixelFormat.RGBA, 2, 2, 0, PixelFormat.RGBA, PixelType.UNSIGNED_BYTE, values);
//        Console.WriteLine(pixels);
    //        await gl.TexImage2DAsync(Texture2DType.TEXTURE_2D, 0, PixelFormat.RGBA, 2, 2, PixelFormat.RGBA, PixelType.UNSIGNED_BYTE, values);

        var resolutionLocation = await gl.GetUniformLocationAsync(glDrawer.Program.Program, "u_resolution");
        await gl.UniformAsync(resolutionLocation, canvasReference.Width, canvasReference.Height);

        await glDrawer.FillBuffer("a_position", 2, DataType.FLOAT, false, setRectangle(0, 0, 2, 2));
        
        await glDrawer.DrawBlankRectangle(false);
    //        await glDrawer.DrawVoronoiTesselation(vertices, colors);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes {
                PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE
            });

            var vertShaderSource = await Misc.GetFileContents("Shaders/voronoi.vert", Http);
            var fragShaderSource = await Misc.GetFileContents("Shaders/voronoi.frag", Http);

            var glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            glDrawer = new GLDrawer(glProgram);
            await gl.UseProgramAsync(glProgram);
            await glDrawer.ClearWithColor(0.5f, 0.5f, 0.5f, 1f);
        }
    }

}