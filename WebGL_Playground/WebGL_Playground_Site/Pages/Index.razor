@page "/"
@using Blazor.Extensions.Canvas.WebGL;
@using WebGLWrapping;
@inject HttpClient Http

<h1>Random triangles</h1>

<BECanvas Width="1000" Height="600" @ref="canvasReference"></BECanvas>
<br />
<NumberInput IntegerNumber="true" @ref="trianglesCount" DefaultValue="10" />
<br />
<button @onclick="Draw">Draw</button>

@code {
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLDrawer glDrawer;

    private NumberInput trianglesCount;

    private bool needsRendering = true;

    private async Task<String> GetFileContents(string sourcePath) {
        string source;
        try {
            source = await Http.GetStringAsync(sourcePath);
            return source;
        } catch(Exception e) {
            throw new Exception(e.Message);
        }
    }

    private Tuple<float[], byte[]> GenerateTriangles(int count) {
        var vertices = new float[6 * count];
        var colors = new byte[12 * count];

        var rnd = new Random();

        for(int i = 0; i < vertices.Length; i++) {
            vertices[i] = (float)(rnd.NextDouble() * 2.0 - 1.0);
        }
        for(int i = 0; i < colors.Length; i++) {
            colors[i] = (byte)rnd.Next(0, 255);
        }

        return new Tuple<float[], byte[]>(vertices, colors);
    }

    protected async Task Draw() {
        await gl.ViewportAsync(0, 0, (int)canvasReference.Width, (int)canvasReference.Height);

        await glDrawer.ClearWithColor(0f, 0f, 0f, 1f);

        var count = (int)trianglesCount.Value;

        var data = GenerateTriangles(count);

        await glDrawer.DrawTriangles(data.Item1, data.Item2);
        Console.WriteLine("Done drawing");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(needsRendering) {
            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes { PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE });

            var vertShaderSource = await GetFileContents("Shaders/shader.vert");
            var fragShaderSource = await GetFileContents("Shaders/shader.frag");

            var glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            glDrawer = new GLDrawer(glProgram);
            await gl.UseProgramAsync(glProgram);

            await Draw();

            needsRendering = false;
        }
    }
}