@page "/trianglesInterpolation"

@using System.Threading;
@using Blazor.Extensions.Canvas.WebGL;
@using WebGLWrapping;
@using WebGL_Playground_Site;
@inject HttpClient Http;

<h3>Triangles interpolation</h3>

<BECanvas Width="1700" Height="850" @ref="canvasReference"></BECanvas>
<br/>
<NumberInput IntegerNumber="true" @ref="TrianglesCount" DefaultValue="10"/>
<br/>
<button @onclick="Draw">Random</button>
<br/>
<NumberInput @ref="TimeStepInput" DefaultValue="0.005"/>
<br/>
<button @onclick="Interpolate">Interpolate</button>

@code {
    private BECanvasComponent canvasReference;
    private WebGLContext gl;
    private GLDrawer glDrawer;

    public NumberInput TrianglesCount;

    private TrianglesSet beginTriangles;
    private TrianglesSet endTriangles;
    private int VerticesCount;

    private void SetUpTriangles() {
        var count = (int)TrianglesCount.Value;
        beginTriangles = GLHelper.GenerateTriangles(count, ColorsGeneratorFlags.FixAlpha);
        var beginVertices = beginTriangles.vertices.ToArray();
        VerticesCount = beginVertices.Length;
        beginTriangles.vertices = beginVertices;
        beginTriangles.colors = beginTriangles.colors.ToArray();
            
        endTriangles = GLHelper.GenerateTriangles(count);
        endTriangles.vertices = endTriangles.vertices.ToArray();
        endTriangles.colors = endTriangles.colors.ToArray();
    }

    protected async Task Draw() {
        await gl.ViewportAsync(0, 0, (int)canvasReference.Width, (int)canvasReference.Height);

        await glDrawer.ClearWithColor(0f, 0f, 0f, 1f);

        SetUpTriangles();

        await glDrawer.InterpolateTriangles(beginTriangles.vertices.ToArray(),
                                   beginTriangles.colors.ToArray(),
                                   endTriangles.vertices.ToArray(),
                                   endTriangles.colors.ToArray(),
                                   time);
        Console.WriteLine("Done drawing");
    }

    public NumberInput TimeStepInput;
    private float time = 0.0f;
    private Task InterpolateTask;
    private bool ContinueInterpolation = true;
    private float timeStep = 0.005f;

    protected async Task Interpolate() {
        timeStep = (float)TimeStepInput.Value;
        if (InterpolateTask is not null) {
            ContinueInterpolation = !ContinueInterpolation;
            return;
        }
        InterpolateTask = Task.Run(async () => {
            var interval = (int)(1000 * timeStep);
            while(true) {
                await Task.Delay(interval);
                if (!ContinueInterpolation) {
                    continue;
                }
                await glDrawer.ClearWithColor(0f, 0f, 0f, 1f);
                var newTime = time + timeStep;
                switch (newTime) {
                    case > 1f:
                        timeStep = -timeStep;
                        newTime = time + timeStep;
                        break;
                    case < 0f:
                        timeStep = -timeStep;
                        newTime = time + timeStep;
                        break;
                }
                time = (float)newTime;
                await glDrawer.SetTime((float)time);

                await gl.DrawArraysAsync(Primitive.TRIANGLES, 0, VerticesCount);
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            gl = GLContext.GL = await canvasReference.CreateWebGLAsync(new WebGLContextAttributes { PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE });

            var vertShaderSource = await Misc.GetFileContents("Shaders/interpolation.vert", Http);
            var fragShaderSource = await Misc.GetFileContents("Shaders/interpolation.frag", Http);

            SetUpTriangles();

            var glProgram = await GLProgram.SetUpProgram(vertShaderSource, fragShaderSource);
            glDrawer = new GLDrawer(glProgram);
            await gl.UseProgramAsync(glProgram);

            await Draw();
        }
    }

}