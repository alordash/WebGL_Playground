@using System.Globalization
@using WebGL_Playground_Site.Geometry

<div class="grid">
    @for (int y = 0; y < Height; y++) {
        var yLoc = y;
        @for (int x = 0; x < Width; x++) {
            var xLoc = x;
            <input type="number" class="matrixdisplay" value="@Matrix[xLoc, yLoc].ToString("0.0")" @onchange="@(e => OnChange(e, xLoc, yLoc))" @onwheel="@(e => OnWheel(e, xLoc, yLoc))"
                   style="background: rgb(@red[xLoc, yLoc], @green[xLoc, yLoc], @blue[xLoc, yLoc])"/>
        }
    }
</div>

@code {

    private static readonly int[,] emptyColors = new int[3, 3] {
        {
            255, 255, 255
        }, {
            255, 255, 255
        }, {
            255, 255, 255
        },
    };

    private int[,] red = (int[,])emptyColors.Clone();
    private int[,] green = (int[,])emptyColors.Clone();
    private int[,] blue = (int[,])emptyColors.Clone();

    private static readonly float[] boundaries = {
        -2f, 0f, 2f
    };

    private static readonly int[] reds = {
        87, 169, 255
    };

    private static readonly int[] greens = {
        141, 233, 172
    };

    private static readonly int[] blues = {
        221, 174, 147
    };

    private static int GetColorMix(float v, int[] colors) {
        var l = boundaries.Length;
        for (int i = 0; i < l - 1; i++) {
            var prev = boundaries[i];
            var next = boundaries[i + 1];
            var less = v < prev;
            var greater = v > next;
            if (less && i == 0) {
                return colors[i];
            } else if (greater && i == l - 2) {
                return colors[l - 1];
            } else if (!less && !greater) {
                var mNext = (v - prev) / 2f;
                var mPrev = 1f - mNext;
                return (int)(mPrev * colors[i] + mNext * colors[i + 1]);
            }
        }
        return 0;
    }

    private void SetColors(float v, int x, int y) {
        red[x, y] = GetColorMix(v, reds);
        green[x, y] = GetColorMix(v, greens);
        blue[x, y] = GetColorMix(v, blues);
    }

    private void ResetColors() {
        for (int x = 0; x < 3; x++) {
            for (int y = 0; y < 3; y++) {
                SetColors(matrix[x, y], x, y);
            }
        }
    }

}

@code {

    private float[,] matrix;

    [Parameter]
    public float[,] DefaultMatrix { get; set; }

    [Parameter]
    public Func<float, int, int, Task> OnChangeCallback { get; set; }

    public float[,] Matrix {
        get => matrix;
        set {
            matrix = value;
            ResetColors();
        }
    }

        private const float zeroThreshold = 0.1f;
        private const float scrollDecrease = 1000f;

    private void SetValue(float v, int x, int y, bool preSum = false) {
        if (preSum) {
            v += matrix[x, y];
        }
        if (Math.Abs(v) <= zeroThreshold) {
            v = 0f;
        }
        v = (float)Math.Truncate(v * 10f) / 10f;
        matrix[x, y] = v;
        SetColors(v, x, y);
        if (OnChangeCallback != null) {
            OnChangeCallback(v, x, y);   
        }
    }

    private void OnChange(ChangeEventArgs e, int x, int y) {
        SetValue(e.Value is string strVal ? float.Parse(strVal) : (float)e.Value, x, y);
    }

    private void OnWheel(WheelEventArgs wE, int x, int y) {
        var v = -(float)wE.DeltaY / scrollDecrease;
        SetValue(v, x, y, true);
    }

    private int width;
    public int Width {
        get => width;
    }

    private int height;
    public int Height {
        get => height;
    }

    protected override void OnParametersSet() {
        width = Matrix.GetLength(0);
        height = Matrix.GetLength(1);
    }

    protected override void OnInitialized() {
        Matrix = DefaultMatrix;
        base.OnInitialized();
    }

}